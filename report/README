************************************************************************************************************************
******************************************** CORN-e-LIUS Fie System ****************************************************
************************************************************************************************************************


Tsiris Nikitas		2335	ntsiris@uth.gr
Tsourdinis Thodoris 2303	ttsourdinis@uth.gr
Charmanis George	2443	gcharmanis@uth.gr


************************************************************************************************************************
								ΑΡΧΙΤΕΚΤΟΝΙΚΗ / ΣΧΕΔΙΑΣΤΙΚΕΣ ΑΠΟΦΑΣΕΙΣ:
************************************************************************************************************************

Παραδοχές:

	-> Όλες οι αιτήσεις ανάγνωσης και εγγραφής γίνονται από την αρχή και σε απόσταση πολλαπλάσια των 4 KB, δουλεύουμε 		με αρχεία μεγέθους πολλαπλάσιο των 4 KB.

	-> Αν δύο block έχουν το ίδιο hash υποθέτουμε ότι είναι ίδια.

	-> Το cornelius υποστηρίζει μόνο μονονηματική εκτέλεση.

	-> Το cornelius υποστηρίζει μέχρι OPEN_FDS_MAX ανοιχτούς file descriptors.

	-> Κάθε αρχείο στο cornelius μπορεί να αποτελείται από εως και NUM_BLOCKS blocks.

	-> OPEN_FDS_MAX και NUM_BLOCKS are defined 100.


Το cornelius βασίζει την λειτουργία του σε δύο ειδών αρχεία, τα αρχεία οδηγιών (instruction files), από τα οποία μόνο
το όνομα είναι εμφανές στον χρήστη, και τα αρχεία block (block files), τα οποία είναι αόρατα στον χρήστη.

Αρχεία οδηγιών:
	Περιέχουν:
		1. MAGIC_NUMBER για αναγνώριση τον συμβατικών αρχείων.
		2. Struct metadata, περιέχει όλες τις πληροφορίες μεγέθους, δικαιωμάτων και χρόνων.
		3. Struct block_links, περιέχει την αλληλουχία των block που αποτελούν το κάθε αρχείο.

	-> Με τη δημιουργία ένος αρχείου, πρώτα φτιάχνεται το αρχείο οδηγιών το οποίο αποτελεί την ταυτότητα του συνολικού
		αρχείου του χρήστη και έπειτα προστίθενται τα block files.
	-> Τα αρχεία οδηγιών είναι τα δομικά στοιχεία των αρχείων στο σύστημα cornelius.

Αρχεία block:
	Περιέχουν:
		1. Μέγεθος data του block file. (Βρίσκεται σε περίπτωση που αποφασίζαμε να έχουμε μεταβλητό μέγεθος block).
		2. Αναφορές αρχείων στο συγκεκριμένο block.
		3. Τα δεδομένα του block.

	-> Τα block files έχουν όνομα .~HASH_CODE, με αυτόν τον τρόπο είναι εύκολη η αναγνώριση τους μέσα στην αποθήκη των
		block. Για να πάρουμε το hash code σε μορφή string χρησιμοποιούμε την δική μας συνάρτηση convertSHA1ToString.


To cornelius είναι non-volatile καθώς έχοντας τα αρχεία οδηγιών και τα αρχεία block μέσα στην
αποθήκη, καθιστά τετριμένη την ανακτασκευή των αρχείων του χρήστη ανα πάσα στιγμή.

Το cornelius εσωτερικά για την διαχείριση των ανοιχτών αρχείων διατηρεί δύο πίνακες.
Ο ένας πίνακας αποτελείται από δείκτες σε κόμβους μιας λίστας.

Κάθε κόμβος αποτελείται από τα εξής πεδία:
	-> Το όνομα του αρχείου που αντιπροσωπεύει ο κόμβος.
	-> Τον file descriptor που αντιστοιχεί σε αυτό το αρχείο.
	-> Τα flags με τα οποία είναι ανοιχτό το αρχείο (αν είναι block file τα flags είναι O_RDWR)
	-> Έναν ακέραιο που δείχνει αν το αρχείο πρέπει να διαγραφεί μετά το κλείσιμο.
	-> Έναν δείκτη σε κόμβο που δείχνει στο επόμενο block προς εγγραφή/ανάγνωση. (χρήσιμο μόνο για την κεφαλή).

Σε κάθε θέση του πίνακα αναπαριστούμε ένα ανοιχτό αρχείο, έχοντας ως κεφαλή το αρχείο οδηγιών, το οποίο βρίσκεται
ανοιχτό εσωτερικά στο σύστημα. Κάθε επόμενος κόμβος αντιπροσωπεύει το επόμενο block που αποτελεί το αρχείο, το οποίο
βρίσκεται και αυτό εσωτερικά ανοιχτό στο σύστημα.

Ο δεύτερος πίνακας χρησιμοποιείται για να βλέπουμε ποιά blocks έχουν ήδη ανοίχτει εσωτερικά και να αποφεύγονται διπλές
κλήσεις της open για το ίδιο block file.

Στον file handler αναθέτουμε τον file descriptor που αντιστοιχεί στο ανοιχτό αρχείο οδηγιών.

Αν ζητηθεί από τον χρήστη open πάνω σε αρχείο που είναι ήδη ανοιχτό το σύστημα δεν θα ξανανοίξει το αρχείο, απλά θα
ανανεώσει τα flags και τους χρόνους πρόσβασης και τέλος θα επιστρέψει στον file handler τον file descriptor του
ήδη υπάρχοντος αρχείου οδηγιών.

Οι δύο πίνακες συντηρούνται και μεταβάλλονται στις κλήσεις os_open, os_write και os_release έτσι ώστε να είναι συνεπείς
μεταξύ τους και να μην "ξεμένουν" ανοιχτά αρχείο που δεν χρησιμοποιούνται πια.


Συναρτήσεις που μεταποιήσαμε:

	-> getattr
	-> mknod
	-> unlink
	-> truncate
	-> utime
	-> open
	-> read
	-> write
	-> release
	-> opendir
	-> releasedir
	-> readdir
	-> init
	-> destroy
	-> access


Συναρτήσεις που προσθέσαμε:

	-> os_fullpath: Επιστρέφει το απόλυτο path ως προς το rootdir κάθε αρχείου που φαίνεται στο mountdir.

	-> os_update_meta: Δεδομένου file descriptor που αντιστοιχεί σε αρχείο οδηγιών μεταβάλλει τα metadata του σύμφωνα με
		με τα ορίσματά της.

	-> convertSHA1ToString: Μετατρέπει το hash που επέστρεψε η sha1 σε εκτυπώσιμο string.
		!!! Σχόλιο: Απαραίτητη συνάρτηση εφόσον χρησιμοποιούμε το "μοναδικό" hash του κάθε block ως αναγνωριστικό του
					(όνομα) στην αποθήτη των blocks.



************************************************************************************************************************
											ΠΕΙΡΑΜΑΤΙΚΗ ΑΞΙΟΛΟΓΙΣΗ:
************************************************************************************************************************

-> Αντιγραφή εξωτερικών αρχείων στο file system το οποίο είχε ως αποτέλεσμα την επιτυχημένη μετατροπή τους σε συμβατικά
	με το cornelius αρχεία.

-> Αντιγραφή αρχείων εντός του συστήματος.

-> Διαγραφή αρχείων.

-> Δημιουργία αρχείων με append και με εγγραφή στη μέση του αρχείου.

-> Truncation σε μικρότερο αλλά και μεγαλύτερο μέγεθος από αυτό του αρχείου.

-> Ανάγνωση αρχείων μέσω των εντολών cat, less, more.

-> Εκίνηση του συστήματος αρχείων με γεμάτη αποθήκη.

!!! Περιλαμβάνουμε scripts που τεστάρουν τα περισσότερα από τα παραπάνω, ένα αρχείο c το οποίο τεστάρει την εγγραφή
!!! στη μέση του αρχείου και έτοιμα αρχεία μεγέθους ανάλογο του BLOCK_SIZE.



************************************************************************************************************************
								ΟΔΗΓΙΕΣ ΕΚΤΕΛΕΣΗΣ ΠΕΙΡΑΜΑΤΙΚΗΣ ΑΞΙΟΛΟΓΙΣΗΣ:
************************************************************************************************************************

-> ./concatenate_two_files.sh new_file file1 file2

-> Τα υπόλοιπα script δεν παίρνουν ορίσματα: ./script_name.sh

-> Για το αρχείο c υπάρχει Makefile.


************************************************************************************************************************
												"ΠΙΘΑΝΑ" ΠΡΟΒΛΗΜΑΤΑ:
************************************************************************************************************************

-> Το σύστημα μας παρουσιάζει ένα "ανεξήγητο" πρόβλημα στο truncate (τώρα αν παρουσιάζετει πρόβλημα και σε κανένα άλλο
	bonus θα δείξει η νεκροψία), το πρόβλημα παρουσιάζεται όταν κάνεις truncate με μικρότερο μέγεθος, εκεί σου ταράζει
	όλο το σύστημα εσωτερικά και η συμπεριφορά είναι απρόβλεπτη.
-> Το βασικό κομμάτι της εργασίας αναπτύχθηκε στο vm, επειδή όμως το να δουλεύεις στο vm κατάντησε απελπιστικά αργό για
	τα bonus δουλέψαμε σε native instalation UBUNTU 18.04 LTS με την ίδια έκδοση του fuse που έχει και στο vm.